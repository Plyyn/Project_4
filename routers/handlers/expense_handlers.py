from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.expense_states import ExpenseStates
from services.database import get_session, User, Expense
from datetime import datetime
from keyboards.builders import build_category_keyboard
from aiogram.filters import Command
from contextlib import contextmanager

router = Router()

categories = ["üçè –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üìå –î—Ä—É–≥–æ–µ"]


@contextmanager
def db_session():
    session = get_session()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()


@router.message(Command("add"))
async def cmd_add_expense(message: Message, state: FSMContext):
    with db_session() as session:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(user)
            session.commit()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(ExpenseStates.waiting_for_amount)


@router.message(ExpenseStates.waiting_for_amount, F.text.regexp(r'^\d+(\.\d+)?$'))
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=build_category_keyboard(categories))
        await state.set_state(ExpenseStates.waiting_for_category)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")


@router.message(ExpenseStates.waiting_for_category, F.text.in_(categories))
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExpenseStates.waiting_for_description)


@router.message(ExpenseStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if 'amount' not in data or 'category' not in data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        with db_session() as session:
            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user:
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            expense = Expense(
                user_id=user.id,
                amount=data['amount'],
                category=data['category'],
                description=message.text if message.text else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
                date=datetime.now()
            )
            session.add(expense)

            await message.answer(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"–°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text if message.text else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
            )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram import F


@router.message(Command("delete"))
async def cmd_delete_expense(message: Message):
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        expenses = session.query(Expense).filter_by(user_id=user.id).order_by(Expense.date.desc()).limit(10).all()

        if not expenses:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        builder = InlineKeyboardBuilder()
        for expense in expenses:
            builder.button(
                text=f"{expense.date.strftime('%d.%m')} - {expense.category} - {expense.amount} —Ä—É–±.",
                callback_data=f"delete_{expense.id}"
            )
        builder.adjust(1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    finally:
        session.close()


@router.callback_query(F.data.startswith("delete"))
async def process_delete_expense(callback: CallbackQuery):
    expense_id = int(callback.data.split("_")[1])
    session = get_session()
    try:
        expense = session.query(Expense).filter_by(id=expense_id).first()
        if expense:
            session.delete(expense)
            session.commit()
            await callback.message.edit_text(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω:\n"
                f"–î–∞—Ç–∞: {expense.date.strftime('%d.%m.%Y')}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category}\n"
                f"–°—É–º–º–∞: {expense.amount} —Ä—É–±."
            )
        else:
            await callback.answer("–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        print(f"Delete error: {e}")
    finally:
        session.close()
        await callback.answer()