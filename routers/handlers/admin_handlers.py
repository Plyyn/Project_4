from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from filters.admin_filter import admin_filter
from services.database import get_session, User, Expense
from keyboards.inline import get_admin_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()
router.message.filter(admin_filter)
router.callback_query.filter(admin_filter)  # –§–∏–ª—å—Ç—Ä –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫

@router.message(Command("admin"))
async def admin_panel(message: Message):
    logger.info(f"Admin access by {message.from_user.id}")
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@router.message(Command("stats_all"))
async def cmd_stats_all(message: Message):
    session = get_session()
    try:
        users = session.query(User).all()
        total_users = len(users)
        total_expenses = sum(exp.amount for exp in session.query(Expense).all())

        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí∏ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses} —Ä—É–±."
        )
    finally:
        session.close()

@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    if len(message.text.split()) > 1:
        text = ' '.join(message.text.split()[1:])
        session = get_session()
        try:
            users = session.query(User).all()
            for user in users:
                try:
                    await message.bot.send_message(user.telegram_id, text)
                except Exception as e:
                    logger.error(f"Failed to send to {user.telegram_id}: {e}")
            await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        finally:
            session.close()
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")