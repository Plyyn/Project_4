from keyboards.inline import get_main_menu_keyboard
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_main_menu_keyboard
from states.expense_states import ExpenseStates
from states.budget_states import BudgetStates
from states.currency_states import CurrencyStates
from services.database import get_session, User, Expense
from routers.handlers.stats_handlers import cmd_stats
from aiogram.types import ReplyKeyboardRemove
from config.settings import ADMIN_IDS
from keyboards.inline import get_admin_keyboard



router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±—é–¥–∂–µ—Ç–æ–º.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "/delete_expense - —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/budget - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text, reply_markup=ReplyKeyboardRemove())

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/stats - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/budget - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
        "/remaining - –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n" 
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/stats_all - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    await callback.message.answer(help_text)
    await callback.answer()


@router.callback_query(F.data == "add_expense")
async def add_expense_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await state.set_state(ExpenseStates.waiting_for_amount)
    await callback.answer()

@router.callback_query(F.data == "show_stats")
async def show_stats_callback(callback: CallbackQuery):
    await cmd_stats(callback.message)
    await callback.answer()

@router.callback_query(F.data == "set_budget")
async def set_budget_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞:")
    await state.set_state(BudgetStates.waiting_for_amount)
    await callback.answer()

@router.callback_query(F.data == "remaining_budget")
async def remaining_budget_callback(callback: CallbackQuery):
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if user and user.budget > 0:
            expenses = session.query(Expense).filter_by(user_id=user.id).all()
            total = sum(exp.amount for exp in expenses)
            remaining = user.budget - total
            await callback.message.answer(f"üîÑ –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: {remaining:.2f} —Ä—É–±.")
        else:
            await callback.message.answer("–ë—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /budget")
    finally:
        session.close()
    await callback.answer()

@router.callback_query(F.data == "convert")
async def currency_convert_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    await state.set_state(CurrencyStates.waiting_for_amount)
    await callback.answer()



@router.message(BudgetStates.waiting_for_amount, F.text.regexp(r'^\d+(\.\d+)?$'))
async def process_budget_amount(message: Message, state: FSMContext):
    amount = float(message.text)
    if amount <= 0:
        await message.answer("–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(user)

        user.budget = amount
        session.commit()

        await message.answer(
            f"‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount} —Ä—É–±.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞")
        print(f"Budget save error: {e}")
    finally:
        session.close()
        await state.clear()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()  # –í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )

@router.message(Command("check_admin"))
async def check_admin(message: Message):
    is_admin = message.from_user.id in ADMIN_IDS
    await message.answer(f"–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}\nADMIN_IDS: {ADMIN_IDS}")